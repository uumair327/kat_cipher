name: Python CI/CD

on:
  push:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  test:
    name: Test with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libegl1 libxcb-xinerama0 libxkbcommon-x11-0
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install --upgrade --no-cache-dir -r requirements.txt pytest
        pip check
        
    - name: Run tests
      run: |
        cd tests
        python -m unittest discover -s . -p "test_*.py"

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'  # Run on every push to main branch
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install setuptools wheel twine build
    - name: Clean build artifacts
      run: |
        echo "Cleaning previous build artifacts..."
        rm -rf dist/ build/ *.egg-info/

    - name: Build package
      run: |
        echo "Building package..."
        python -m build --sdist --wheel --outdir dist/
        
        echo "Built files:"
        ls -la dist/
        
    - name: Publish to PyPI
      if: github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "ERROR: PyPI API token not found. Please add it to your repository secrets as PYPI_API_TOKEN."
          echo "For more information, see: https://pypi.org/help/#apitoken"
          exit 1
        fi
        
        echo "Uploading to PyPI..."
        python -m twine upload --skip-existing --non-interactive --disable-progress-bar dist/*
